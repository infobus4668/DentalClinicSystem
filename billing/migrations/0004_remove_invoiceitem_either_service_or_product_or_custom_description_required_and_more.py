# Generated by Django 5.2.1 on 2025-06-09 03:02

import django.core.validators
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('billing', '0003_remove_invoiceitem_either_service_or_product_or_custom_description_required_and_more'),
    ]

    operations = [
        migrations.RemoveConstraint(
            model_name='invoiceitem',
            name='either_service_or_product_or_custom_description_required',
        ),
        migrations.AddField(
            model_name='invoice',
            name='discount',
            field=models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Overall discount on the entire invoice', max_digits=10),
        ),
        migrations.AddField(
            model_name='invoiceitem',
            name='discount',
            field=models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Discount for this specific item', max_digits=10),
        ),
        migrations.AlterField(
            model_name='invoice',
            name='invoice_number',
            field=models.CharField(editable=False, max_length=50, unique=True),
        ),
        migrations.AlterField(
            model_name='invoice',
            name='total_amount',
            field=models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Subtotal of all items before discount', max_digits=10),
        ),
        migrations.AlterField(
            model_name='invoiceitem',
            name='description',
            field=models.CharField(blank=True, default='', help_text='Custom description or auto-filled from service/product.', max_length=255),
        ),
        migrations.AlterField(
            model_name='invoiceitem',
            name='quantity',
            field=models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)]),
        ),
        migrations.AddConstraint(
            model_name='invoiceitem',
            constraint=models.CheckConstraint(condition=models.Q(models.Q(('product__isnull', True), ('service__isnull', False)), models.Q(('product__isnull', False), ('service__isnull', True)), models.Q(('description__gt', ''), ('description__isnull', False), ('product__isnull', True), ('service__isnull', True)), _connector='OR'), name='item_source_exclusive_or_custom_description'),
        ),
    ]
